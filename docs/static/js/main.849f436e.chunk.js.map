{"version":3,"sources":["data-table/TextField.module.css","data-table/Row.module.css","data-table/Row.js","data-table/TextField.js","data-table/DataTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TYPES_SINGULAR","Row","props","value","id","kebabCase","data","name","className","styles","href","Error","formatType","type","unlock_level","levels","starter","wall","TextField","classNames","inputProps","input","length","onClick","onClear","clear","CATEGORY_OPTIONS","DataTable","React","useState","category","setCategory","search","setSearch","filteredRows","rows","filter","item","filterValue","filterCategory","toLowerCase","includes","filterName","placeholder","onChange","event","target","map","option","key","row","App","guns","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.849f436e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text-field\":\"TextField_text-field__BPK7b\",\"clear\":\"TextField_clear__1trpn\",\"input\":\"TextField_input__1CkQj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Row\":\"Row_Row__2mzEC\"};","import React from 'react';\nimport { kebabCase } from 'lodash-es';\nimport styles from './Row.module.css'\n\nconst formatWallText = (value) => {\n  if (typeof value === 'string') {\n    return `Wall (${value})/Box`;\n  }\n  return value ? 'Wall/Box' : 'Box only'\n};\n\nconst TYPES_SINGULAR = {\n  'Assault Rifles': 'Assault Rifle',\n  'LMGs': 'LMG',\n  'Secondaries': 'Secondary',\n  'Sniper Rifles': 'Sniper Rifle',\n  'Submachine Guns': 'Submachine Gun',\n  'Tactical Rifles': 'Tactical Rifle'\n};\n\nconst formatType = (value) => {\n  if (!TYPES_SINGULAR[value]) {\n    throw new Error(`Cannot find value: ${value}`);\n  }\n  return TYPES_SINGULAR[value];\n}\n\nexport const Row = (props) => {\n  const id = kebabCase(props.data.name);\n  return (\n    <div id={id} className={styles.Row}>\n      <div>\n        <a href={ `#${id}` }>\n          <strong>{ props.data.name }</strong>\n        </a>\n      </div>\n      <div>\n        <p>Category: {formatType(props.data.type)}</p>\n        <p>Unlock: { props.data.unlock_level }</p>\n        <p>Max Level: { props.data.levels }</p>\n        <p>Starter: {props.data.starter ? 'Yes' : 'No' }</p>\n        <p>{formatWallText(props.data.wall) }</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Row;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { X } from 'react-feather';\nimport styles from './TextField.module.css';\n\nexport const TextField = (props) => {\n  return (\n    <div className={classNames(styles['text-field'], props.className)}>\n      <input {...props.inputProps} className={classNames(styles.input, props.inputProps.className)} />\n      { (props.inputProps.value || '').length > 0 &&\n        <button onClick={props.onClear} className={styles.clear}><X /></button>\n      }\n    </div>\n  );\n}\n\nexport default TextField;","import React from 'react';\nimport Row from './Row';\nimport TextField from './TextField';\n\nconst filterCategory = (item, filterValue) => {\n  return item.type === filterValue;\n};\n\nconst filterName = (item, filterValue) => {\n  return item.name.toLowerCase().includes(filterValue.toLowerCase());\n};\n\nconst CATEGORY_OPTIONS = [\n  'Assault Rifles',\n  'LMGs',\n  'Secondaries',\n  'Sniper Rifles',\n  'Submachine Guns',\n  'Tactical Rifles',\n];\n\nexport const DataTable = (props) => {\n  const [category, setCategory] = React.useState('');\n  const [search, setSearch] = React.useState('');\n\n  const onSearchChange = (event) => {\n    setSearch(event.target.value);\n  };\n\n  const onSelectCategory = (event) => {\n    setCategory(event.target.value);\n  };\n\n  const resetFilters = () => {\n    setCategory('');\n  };\n\n  const filteredRows = props.rows.filter((item) => {\n    if (category === '') {\n      return true\n    }\n    return filterCategory(item, category);\n  }).filter((item) => {\n    if (search === '') {\n      return true\n    }\n    return filterName(item, search);\n  });\n\n  return (\n    <div>\n      <div>\n        <TextField\n          onClear={() => setSearch('')}\n          inputProps={{\n            type: 'text',\n            name: 'search',\n            placeholder: 'Search',\n            value: search,\n            onChange: onSearchChange\n          }}\n        />\n      </div>\n      <div className=\"DataTable-filters\">\n        <select onChange={ onSelectCategory } value={ category}>\n          <option value=\"\">All Categories</option>\n          {\n            CATEGORY_OPTIONS.map((option) => (\n              <option key={option} value={ option }>{option}</option>\n            ))\n          }\n        </select>\n        <button type=\"button\" onClick={resetFilters}>Clear Filters</button>\n      </div>\n      { filteredRows.map((row) => <Row key={row.name} data={ row } />) }\n    </div>\n  );\n};\n\nexport default DataTable;","import React from 'react';\nimport './App.css';\nimport data from './data.json';\nimport DataTable from './data-table/DataTable';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">CoD Black Ops 4 Zombies Armory</header>\n      <main className=\"App-main\">\n        <DataTable rows={ data.guns } />\n      </main>\n      <footer className=\"App-footer\">\n        Corrections? Open an Issue on&nbsp;\n        <a href=\"https://github.com/nickstanish/blops4-zombies-armory\">\n          GitHub\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}